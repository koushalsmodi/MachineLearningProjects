# -*- coding: utf-8 -*-
"""Tensors.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LNVfiJKus1eVUFllkJvBH02Hxbyvkgcd
"""

# Tensor: container to store data (mostly numerical data)
# 1) Number of axes (rank) # no. of digits required to locate a value
# 2) Shape
# 3) Data type
import numpy as np

# Scalars: 0D tensor (0 axis)
scalar = np.array(5)
print(scalar.ndim) # 0
print(scalar.shape) # ()
print(scalar.dtype) # int64

# Vectors: 1D tensor (1 axis)
vector = np.array([12,3,6,14,7])
print(vector.ndim) # 1
print(vector.shape) # (5,)
print(vector.dtype) # int64

# Matrices: 2D tensor (2 axes)
matrix = np.array([
        [5,78,2,34,0],
        [6,79,3,35,1],
        [7,80,4,36,2]
    ])
print(matrix.ndim) # 2
print(matrix.shape) # (3,5)
print(matrix.dtype) # int64

# Rank-3 tensors: 3D tensor (3 axes)
cube = np.array([
    [[5,78,2,34,0],
        [6,79,3,35,1],
        [7,80,4,36,2]],
    [[5,78,2,34,0],
        [6,79,3,35,1],
        [7,80,4,36,2]],
    [[5,78,2,34,0],
        [6,79,3,35,1],
        [7,80,4,36,2]]
])

print(cube.ndim) # 3
print(cube.shape) # (3, 3, 5)
print(cube.dtype) # int64



# Concrete example
from tensorflow.keras.datasets import mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

print(train_images.ndim) # 3 (meaning a 3D tensor)
print(train_images.shape) # (60000, 28, 28) (60000 matrices of 28*28 integers)
print(train_images.dtype) # uint8

import matplotlib.pyplot as plt
digit = train_images[11]
plt.imshow(digit, cmap=plt.cm.binary)
plt.show()

print(train_labels[11]) # 5

