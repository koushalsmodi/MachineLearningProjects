# -*- coding: utf-8 -*-
"""MNISTclassificationfromscratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p5DL9eRA3hYpAtOSNBkHYGu_mPeZEWBr
"""

# MNIST digit classification from scratch in TensorFlow

# A Simple Dense Class
import tensorflow as tf

class NaiveDense:
  def __init__(self, input_size, output_size, activation):
    self.activation = activation

    # Create a matrix, W, of shape (input_size, output_size), initialized with random values
    w_shape = (input_size, output_size)
    w_initial_value = tf.random.uniform(w_shape, minval=0, maxval = 1e-1)
    self.W = tf.Variable(w_initial_value)

    # Create a vector, b, of shape (output_size, ), initialized with zeros.
    b_shape = (output_size,)
    b_initial_value = tf.zeros(b_shape)
    self.b = tf.Variable(b_initial_value)

  # Forward pass
  def __call__(self, inputs):
    return self.activation(tf.matmul(inputs, self.W) + self.b)

  # Convenience method for retrieving the layer's weights
  @property
  def weights(self):
    return [self.W, self.b]

# A Simple Sequential Class

class NaiveSequential:
  def __init__(self, layers):
    self.layers = layers

  # Forward pass
  # let's us call: output = model(input)

  def __call__(self, inputs):
    # initial data
    x = inputs

    # feeding output of 1 layer to next
    for layer in self.layers:
      x = layer(x)
    # final result
    return x

  @property
  # property lets us use it like an attribute: model.weights, not model.weights()
  def weights(self):
    weights = []
    for layer in self.layers:
      # like [W, b] and adding to the big list
      weights += layer.weights

    return weights

model = NaiveSequential([
    NaiveDense(input_size=28*28, output_size=512, activation=tf.nn.relu),
    NaiveDense(input_size=512, output_size=10, activation=tf.nn.softmax)
])

assert len(model.weights) == 4

# A Batch Generator

import math

class BatchGenerator:
  def __init__(self, images, labels, batch_size=128):
    assert len(images) == len(labels)
    self.index = 0
    self.images = images
    self.labels = labels
    self.batch_size = batch_size
    self.num_batches = math.ceil(len(images) / batch_size)


  def next(self):
    images = self.images[self.index: self.index+ self.batch_size]
    labels = self.labels[self.index: self.index+ self.batch_size]
    self.index += self.batch_size
    return images, labels

# Training step
def one_training_step(model, images_batch, labels_batch):
  # Run the forward pass
  with tf.GradientTape() as tape:
    predictions = model(images_batch)
    per_sample_losses = tf.keras.losses.sparse_categorical_crossentropy(labels_batch, predictions)
    average_loss = tf.reduce_mean(per_sample_losses)

  # Compute the gradient of the loss with regard to the weights. The output gradients is a list where each
  # entry corresponds ot a weights from the model.weights list
  gradients = tape.gradient(average_loss, model.weights)
  # Update the weights using the gradients
  update_weights(gradients, model.weights)
  return average_loss

learning_rate = 1e-3
def update_weights(gradients, weights):
  for g,w in zip(gradients, weights):
    # assign_sub is the equivalent of -= of TensorFlow variables
    w.assign_sub(g*learning_rate)

"""
from tensorflow.keras import optimizers

optimizer = optimizers.SGD(learning_rate = 1e-3)

def update_weights(gradients, weights):
  optimizer.apply_gradients(zip(gradients, weights))
"""

# The full training loop

def fit(model, images, labels, epochs, batch_size=128):
  for epoch_counter in range(epochs):
    print(f"Epoch {epoch_counter}")

    batch_generator = BatchGenerator(images, labels)
    for batch_counter in range(batch_generator.num_batches):
      images_batch, labels_batch = batch_generator.next()
      loss = one_training_step(model, images_batch, labels_batch)
      if batch_counter % 100 == 0:
        print(f"loss at batch {batch_counter}: {loss: .2f}")

# Test drive
from tensorflow.keras.datasets import mnist
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

train_images = train_images.reshape((60000, 28*28))
train_images = train_images.astype("float32")/ 255
test_images = test_images.reshape((10000, 28*28))
test_images = test_images.astype("float32") / 255

fit(model, train_images, train_labels, epochs=10, batch_size=128)

# Evaluating the model
import numpy as np
predictions = model(test_images)
predictions = predictions.numpy()
predicted_labels = np.argmax(predictions, axis = 1)
matches = predicted_labels == test_labels
print(f"accuracy: {matches.mean(): .2f}")

# accuracy:  0.82